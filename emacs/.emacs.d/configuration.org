#+TITLE: Emacs configuration

* Set personal information

  #+BEGIN_SRC emacs-lisp
  (setq user-full-name "Ilay Raz"
        user-mail-address "ilay.raz@gmail.com")
  #+END_SRC

* Package managment

** Initial package setup
   #+BEGIN_SRC emacs-lisp
  (require 'package)
  (setq package-archives '(("gnu" . "https://elpa.gnu.org/packages/")
			   ("marmalade" . "https://marmalade-repo.org/packages/")
			   ("melpa" . "https://melpa.org/packages/")
			   ("org" . "http://orgmode.org/elpa/")))
   #+END_SRC

** Ensure [[https://github.com/jwiegley/use-package][use-package]] is avaliable, if not install it
   #+BEGIN_SRC emacs-lisp
     (unless (package-installed-p 'use-package)
       (package-refresh-contents)
       (package-install 'use-package))
   #+END_SRC
** Always require all packages
   #+BEGIN_SRC emacs-lisp
     (setq use-package-always-ensure t)
   #+END_SRC
* General
** Keep changes from customize in a seperate file
   #+BEGIN_SRC emacs-lisp
     (setq custom-file "~/.emacs.d/emacs-customize.el")
     (load custom-file)
   #+END_SRC
** ask for y-or-n instead of yes-or-no
   #+BEGIN_SRC emacs-lisp
     (fset 'yes-or-no-p 'y-or-n-p)
   #+END_SRC
** Ask for confirmation before killing emacs
   #+BEGIN_SRC emacs-lisp
  (setq confirm-kill-emacs 'y-or-n-p)
   #+END_SRC
** Wait for 20MB before trash collecting
   #+BEGIN_SRC emacs-lisp
     (setq gc-cons-threshold 50000000)
   #+END_SRC
** Increase max read
   #+begin_src emacs-lisp
     (setq read-process-output-max (* 1024 1024))
   #+end_src
** No startup message

   and start with an empty scratch
   #+BEGIN_SRC emacs-lisp
     (setq inhibit-startup-message t
           initial-scratch-message nil)
   #+END_SRC
** Start with configuration.org file open
   #+BEGIN_SRC emacs-lisp
     (setq initial-buffer-choice "~/.emacs.d/configuration.org")
   #+END_SRC
** Save all backups in one place
   #+BEGIN_SRC emacs-lisp
     (setq backup-directory-alist
     `(("." . ,(concat user-emacs-directory "backups"))))
   #+END_SRC
** Automatically update buffer when it changes on disk
   Use =auto-revert-mode= to immidiatly update buffer when file changes on disk
   #+BEGIN_SRC emacs-lisp
  (global-auto-revert-mode t)
   #+END_SRC
** Message startup time
   #+BEGIN_SRC emacs-lisp
     (add-hook 'emacs-startup-hook #'(lambda ()
                                       (message "Emacs ready in %s with %d garbage collections."
                                                (format "%.2f seconds"
                                                        (float-time
                                                         (time-subtract after-init-time before-init-time)))
                                                gcs-done)))
   #+END_SRC
** Tramp use ssh by default
   #+BEGIN_SRC emacs-lisp
     (setq tramp-default-method "ssh")
   #+END_SRC
* Editor
** Always require a final newline
   #+BEGIN_SRC emacs-lisp
  (setq require-final-newline t)
   #+END_SRC

** Don't assume double space after period
   #+BEGIN_SRC emacs-lisp
  (setq sentence-end-double-space nil)
   #+END_SRC

** Disable tab-indent
   #+BEGIN_SRC emacs-lisp
  (setq-default indent-tabs-mode nil)
   #+END_SRC

** Delete trailing whitespace on save
   #+BEGIN_SRC emacs-lisp
  (add-hook 'before-save-hook 'delete-trailing-whitespace)
   #+END_SRC

** Overwrite selection
   Overwrite selection when writing over selected text
   #+BEGIN_SRC emacs-lisp
  (delete-selection-mode)
   #+END_SRC
** Enable hs-minor-mode
   Use C-c @ C-c to toggle code-fold
   #+BEGIN_SRC emacs-lisp
     (add-hook 'prog-mode-hook (lambda () (interactive)(hs-minor-mode 1)))
   #+END_SRC
** Encoding preferences
   #+BEGIN_SRC emacs-lisp
     (prefer-coding-system 'utf-8)
     (set-default-coding-systems 'utf-8)
     (set-terminal-coding-system 'utf-8)
     (set-keyboard-coding-system 'utf-8)
     (setq-default buffer-file-coding-system 'utf-8-unix)
   #+END_SRC
** Save file on exit or file change
   #+BEGIN_SRC emacs-lisp
     (add-hook 'focus-out-hook (lambda () (interactive)(save-some-buffers t)))
     (add-hook 'delete-frame-functions (lambda () (interactive)(save-some-buffers t)))
   #+END_SRC
** Treat CamelCaseSubWords as seperate words
   #+BEGIN_SRC emacs-lisp
  (add-hook 'prog-mode-hook 'subword-mode)
   #+END_SRC
** Auto save
   #+BEGIN_SRC emacs-lisp
     (setq auto-save-visited-file-name nil)
     (auto-save-visited-mode 1)
   #+END_SRC
** Spell check
   #+BEGIN_SRC emacs-lisp
     (when (executable-find "hunspell")
       (setq-default ispell-program-name "hunspell")
       (setq ispell-really-hunspell t))
   #+END_SRC
* Utility functions
  #+BEGIN_SRC emacs-lisp
    (defun insert-newline ()
      "Drop pointed line to a new line then move and tab the line above it"
      (interactive)
      (move-beginning-of-line nil)
      (newline-and-indent)
      (previous-line)
      (indent-for-tab-command))

    (defun create-newline ()
      "Create and move to new line below current line"
      (interactive)
      (move-end-of-line nil)
      (newline-and-indent))

    (defun comment-or-uncomment-region-or-line ()
      "Comments or uncomments the region or the current line if there's no active region."
      (interactive)
      (let (beg end)
        (if (region-active-p)
            (setq beg (region-beginning) end (region-end))
          (setq beg (line-beginning-position) end (line-end-position)))
        (comment-or-uncomment-region beg end)))

    (defun ask-before-closing ()
      "Ask before killing terminal"
      (interactive)
      (if (y-or-n-p (format "Are you sure you want to close this frame?"))
          (save-buffers-kill-terminal)
        (message "Canceled frame close")))

    (defun insert-current-date ()
      "Insert current date at pointer"
      (interactive)
      (insert (shell-command-to-string "echo -n $(date +'%B %e, %Y')")))
  #+END_SRC

* UI preferences
** Disable window elements
   Disable useless scrollbar
   #+BEGIN_SRC emacs-lisp
  (scroll-bar-mode 0)
  (tool-bar-mode t)
   #+END_SRC

** Disable visual bell
   #+BEGIN_SRC emacs-lisp
  (setq ring-bell-function 'ignore)
   #+END_SRC

** Highlight the current line
   Softly highlight background color of current line
   #+BEGIN_SRC emacs-lisp
  (when window-system
    (global-hl-line-mode))
   #+END_SRC


** Set theme
   Use =moe-dark= theme
   #+BEGIN_SRC emacs-lisp
     (load-theme 'spacemacs-dark t)
   #+END_SRC

** Set defualt font
   Increase =font-height=
   #+BEGIN_SRC emacs-lisp
     (set-face-attribute 'default nil :height 250 :family "Inconsolata")
     ;; (set-face-attribute 'default nil :height 250)
   #+END_SRC

** Defualt max line length
   #+BEGIN_SRC emacs-lisp
  (setq-default fill-column 80)
   #+END_SRC

** Activate font-lock
   Use =font-lock-mode= to fontify different kinds of text
   #+BEGIN_SRC emacs-lisp
  (global-font-lock-mode t)
   #+END_SRC

** Show matching parenthesese
   and don't wait before showing them
   #+BEGIN_SRC emacs-lisp
  (show-paren-mode 1)
  (setq show-paren-delay 0.0)
   #+END_SRC

** Pretty symbols
   Use =prettify-symbols-mode= for pretty symbols
   #+BEGIN_SRC emacs-lisp
     (global-prettify-symbols-mode t)
     (setq prettify-symbols-unprettify-at-point t)
   #+END_SRC

** Don't open new file in new frame
   #+BEGIN_SRC emacs-lisp
     (setq ns-pop-up-frame nil)
   #+END_SRC
** Hide menu
   #+BEGIN_SRC emacs-lisp
     (menu-bar-mode 0)
     (tool-bar-mode 0)
   #+END_SRC
* Programming customization
** Set indent
   Use a 4 space indent
   #+BEGIN_SRC emacs-lisp
  (setq-default tab-width 4)
   #+END_SRC

** Multi-language
*** Insert -> function
    #+BEGIN_SRC emacs-lisp
      (defun insert-dash-arrow ()
        "Inserts an arrow (\"->\")"
        (interactive)
        (insert "->"))
    #+END_SRC
** C
*** Set the C indents
    #+BEGIN_SRC emacs-lisp
      (setq c-basic-offset 4
       c-label-minimum-indentation 4)
    #+END_SRC
*** Insert printf function
    #+BEGIN_SRC emacs-lisp
      (defun insert-printf ()
        "Inserts statment \"printf(\"\n\")\" with the pointer pointing to after the opening quote"
        (interactive)
        (insert "printf(\"\\n\", );")
        (backward-char 7))
    #+END_SRC
*** Set cc-mode keybinds
    #+BEGIN_SRC emacs-lisp
  (add-hook 'c-initialization-hook
            (lambda () (define-key c-mode-base-map "\C-cp" 'insert-printf)))
  (add-hook 'c-initialization-hook
            (lambda () (define-key c-mode-base-map (kbd "C-.") 'insert-dash-arrow)))
    #+END_SRC
*** gdb mode
   #+BEGIN_SRC emacs-lisp
     (setq gdb-many-windows t
           gdb-show-main t)
   #+END_SRC
** C++
*** Irony
    #+BEGIN_SRC emacs-lisp
      (use-package irony
        :hook (((c++-mode c-mode objc-mode) . irony-mode)
               (irony-mode . irony-cdb-autosetup-compile-options)))
    #+END_SRC
** Haskell
*** Haskell mode
    #+BEGIN_SRC emacs-lisp
      (use-package haskell-mode
        :mode "\\.hs\\'"
        :interpreter "haskell")
    #+END_SRC
** GAP
   #+BEGIN_SRC emacs-lisp
     (use-package gap-mode
       :custom
       (gap-executable "/usr/bin/gap"))
   #+END_SRC
* File finding
** Set defualt directory to home
   #+BEGIN_SRC emacs-lisp

  (setq default-directory "~/")
   #+END_SRC
** Follow symlinks
   #+BEGIN_SRC emacs-lisp
  (setq vc-follow-symlinks t)
   #+END_SRC
** Add human readable size units to dired
   #+BEGIN_SRC emacs-lisp
     (setq-default dired-listing-switches "-alh")
   #+END_SRC
** Ido
   Enable =ido-mode=
   #+BEGIN_SRC emacs-lisp
   (ido-mode t)
   (setq ido-enable-flex-matching t)
   #+END_SRC
1
* Keybindings
  #+BEGIN_SRC emacs-lisp
    (global-set-key (kbd "M-o") 'other-window)
    (global-set-key (kbd "C-x C-b") 'ibuffer)
    (global-set-key (kbd "C-c d") 'insert-current-date)

    (global-set-key (kbd "C-s") 'isearch-forward-regexp)
    (global-set-key (kbd "C-r") 'isearch-backward-regexp)

    (global-set-key (kbd "C-o") 'insert-newline)
    (global-set-key (kbd "C-M-o") 'create-newline)
    (global-set-key (kbd "M-;") 'comment-or-uncomment-region-or-line)

    (global-set-key (kbd "C-M-/") 'undo-redo)

    (global-set-key(kbd "C-x C-j") 'join-line)

    (global-set-key (kbd "M-<SPC>") 'hippie-expand)

    ;; Toggle menu
    (global-set-key (kbd "<mouse-3>") 'mouse-major-mode-menu)
    (global-set-key (kbd "<M-mouse-3>") 'mouse-popup-menubar)

    ;; Traverse between new hunks
    (global-set-key (kbd "M-n") 'diff-hl-next-hunk)
    (global-set-key (kbd "M-p") 'diff-hl-previous-hunk)

    ;; Set keybind only when Emacs is running as a daemon
    (when (daemonp)
      (global-set-key (kbd "C-x C-c") 'ask-before-closing))

    ;; Unbind suspend-frame
    (global-unset-key (kbd "C-z"))

    ;; Unbind overwrite-mode
    (global-unset-key (kbd "<insert>"))
    (global-unset-key (kbd "<insertchar>"))
  #+END_SRC
* Org-mode
** Display preferences
*** Use pretty bullets instead of asterisks
    #+BEGIN_SRC emacs-lisp
     (use-package org-bullets
       :config
       (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
    #+END_SRC

*** Use syntax highlighting in source block while editing
    #+BEGIN_SRC emacs-lisp
     (setq org-src-fontify-natively t)
    #+END_SRC

*** Make TAB act as if it were issued in a buffer of the language's major mode
    #+BEGIN_SRC emacs-lisp
     (setq org-src-tab-acts-natively t)
    #+END_SRC

*** When editing a code snippet, use current window instead of opening a new one
    #+BEGIN_SRC emacs-lisp
     (setq org-src-window-setup 'current-window)
    #+END_SRC
** Exporting
*** Babel code evaluation
    #+BEGIN_SRC emacs-lisp
      (org-babel-do-load-languages
       'org-babel-load-languages
       '((emacs-lisp . t)
         (python . t)))
    #+END_SRC
*** Export with smart quotes
    #+BEGIN_SRC emacs-lisp
      (setq org-export-with-smart-quotes t)
    #+END_SRC
*** HTML
**** Don't include footer
     #+BEGIN_SRC emacs-lisp
      (setq org-html-postamble nil)
    #+END_SRC
* Packages
** General
*** Diminish
    #+BEGIN_SRC emacs-lisp
      (use-package diminish)
    #+END_SRC
*** dired-subtree
    #+BEGIN_SRC emacs-lisp
      (use-package dired-subtree
        :demand
        :bind (:map dired-mode-map
                    ("i" . dired-subtree-insert)
                    (";" . dired-subtree-remove)))
    #+END_SRC
*** smex
    #+BEGIN_SRC emacs-lisp
      (use-package smex
        :bind ([remap execute-extended-command] . smex))
    #+END_SRC
*** Flycheck
    #+BEGIN_SRC emacs-lisp
      (use-package flycheck
        :diminish
        :config
        (global-flycheck-mode))
    #+END_SRC
*** use-package-ensure-system-package
    #+BEGIN_SRC emacs-lisp
      (use-package use-package-ensure-system-package)
    #+END_SRC
*** Ripgrep
    #+begin_src emacs-lisp
      (use-package rg
        :ensure-system-package (rg . ripgrep)
        :bind ("C-c s" . rg-menu))
    #+end_src
** Git
*** Magit
    Use =C-x g= to bring up the status menu
    #+BEGIN_SRC emacs-lisp
      (use-package magit
        :config
        (global-magit-file-mode)
        :bind ("C-x g" . magit-status))
    #+END_SRC
**** Use =delta= for diffs if installed
     #+begin_src emacs-lisp
       (use-package magit-delta
         :after magit
         :ensure-system-package (delta . git-delta)
         :hook (magit-mode . magit-delta-mode))
     #+end_src
*** Highlight uncommited changes
    Use =diff-hl= package to highlight changed-and-commited lines when programming
    #+BEGIN_SRC emacs-lisp
      (use-package diff-hl
        :config
        (global-diff-hl-mode))
    #+END_SRC
** Company
   #+BEGIN_SRC emacs-lisp
     (use-package company
       :diminish
       :bind ("C-c f" . company-complete)
       :init
       (add-hook 'after-init-hook 'global-company-mode))
   #+END_SRC
*** Math
    #+BEGIN_SRC emacs-lisp
      (use-package company-math
        :after (company)
        :init
        (add-to-list 'company-backends 'company-math-symbols-unicode))
    #+END_SRC
*** Fuzzy matching
    #+BEGIN_SRC emacs-lisp
      (use-package company-flx
        :after company
        :config
        (company-flx-mode +1))
    #+END_SRC
** lsp
   #+begin_src emacs-lisp
     (use-package lsp-mode
       :hook ;; replace XXX-mode with concrete major-mode(e. g. python-mode)
       ;; (XXX-mode . lsp-deferred)
       (python-mode . lsp-deferred)
       (LaTeX-mode . lsp-deferred)
       (lsp-mode . lsp-enable-which-key-integration)
       :commands (lsp lsp-deferred)
       :custom
       lsp-keymap-prefix "C-c l")

     (use-package lsp-ui
       :commands lsp-ui-mode)
   #+end_src
** Projectile
   #+begin_src emacs-lisp
     (use-package projectile
       :bind-keymap
       ("C-c p" . projectile-command-map)
       :config
       (projectile-mode +1))
   #+end_src
** which-key
   #+BEGIN_SRC emacs-lisp
     (use-package which-key
       :defer 1
       :diminish
       :config
       (which-key-mode))
   #+END_SRC
** YASnippet
   #+BEGIN_SRC emacs-lisp
     (use-package yasnippet
       :defer 5
       :custom
       (yas-global-mode 1)
       :config
       (yas-reload-all))
   #+END_SRC
** LaTeX
*** CDLatex
       #+BEGIN_SRC emacs-lisp
         (use-package cdlatex
           :diminish
           :hook ((org-mode . turn-on-org-cdlatex)
                  ((latex-mode LaTeX-mode) . cdlatex-mode))
           :config
           (add-to-list 'cdlatex-math-symbol-alist
                        '(123 ("\\subseteq" "\\subset")))
           (add-to-list 'cdlatex-math-symbol-alist
                        '(125 ("\\supseteq" "\\supset")))
           (add-to-list 'cdlatex-math-symbol-alist
                        '(99 ("\\circ")))
           (add-to-list 'cdlatex-math-symbol-alist
                        '(102 ("\\varphi" "\\phi")))
           (add-to-list 'cdlatex-math-modify-alist
                        '(102 "\\mathfrak" nil t nil nil))
           (add-to-list 'cdlatex-math-modify-alist
                        '(66 "\\mathbb" nil t nil nil))
           :bind (:map cdlatex-mode-map
                       ("'" . cdlatex-math-symbol)
                       ("C-c C-k" . cdlatex-math-modify)))
    #+End_SRC
*** AUCTeX
    #+BEGIN_SRC emacs-lisp
      (use-package auctex
        :defer t
        :custom
        (TeX-auto-save t)
        (TeX-parse-self t)

        :config
        (setq-default TeX-master nil))
    #+END_SRC
**** RefTeX
     #+BEGIN_SRC emacs-lisp
       (use-package reftex
         :diminish
         :ensure nil
         :hook ((LaTeX-mode latex-mode) . turn-on-reftex)
         :custom
         (reftex-plug-into-AUCTeX t))
     #+END_SRC
# * Mail
# ** packages
#     #+BEGIN_SRC emacs-lisp
#      ;; use imagemagick if avaliable
#      (when (fboundp 'imagemagick-register-types)
#        (imagemagick-register-types))

#      (use-package org-mime)

#      (use-package smtpmail
#        :after mu4e
#        :custom
#        (smtpmail-queue-mail nil))

#      (use-package org-m
#        u4e
#        :load-path "/usr/share/emacs/site-lisp/mu4e/"
#        :commands org-mu4e-compose-org-mode
#        :ensure nil
#        :custom
#        (org-mu4e-convert-to-html t))

#      (use-package mu4e-alert
#        :after mu4e
#        :hook ((after-init . mu4e-alert-enable-mode-line-display)
#               (after-init . mu4e-alert-enable-notifications))
#        :config (mu4e-alert-set-default-style 'libnotify)
#        :custom
#        (mu4e-alert-interesting-mail-query
#         (concat
#          "flag:unread maildir:/personal/INBOX "
#          "OR "
#          "flag:unread maildir:/ucsc/INBOX ")))
#    #+END_SRC
# ** mu4e
#    #+BEGIN_SRC emacs-lisp
#      (use-package mu4e
#        :load-path "/usr/share/emacs/site-lisp/mu4e/"
#        :ensure nil
#        :ensure-system-package mu
#        :demand
#        :bind ("C-c m" . mu4e)
#        :config
#        ;; to view selected message in the browser. no signingr required.
#        (add-to-list 'mu4e-view-actions
#                     '("ViewInBrowser" . mu4e-action-view-in-browser) t)
#        (add-hook 'mu4e-view-mode-hook #'visual-line-mode)

#        ;; <tab> to nav to links, <RET> to open them in browser
#        (add-hook 'mu4e-view-mode-hook
#                  (lambda()
#                    (local-set-key (kbd "<RET>") 'mu4e~view-browse-url-from-binding)
#                    (local-set-key (kbd "<tab>") 'shr-next-link)
#                    (local-set-key (kbd "<backtab>") 'shr-previous-link)))

#        ;; dynamically set width of the colums to take whole width
#        (add-hook 'mu4e-headers-mode-hook
#                  (lambda()
#                    (setq mu4e-headers-fields
#                          `((:human-date . 12)
#                            (:flags . 4)
#                            (:from-or-to . 15)
#                            (:subject . ,(- (window-body-width) 47))
#                            (:size . 7)))))

#        ;; spell check
#        (add-hook 'mu4e-compose-mode-hook
#                  (lambda()
#                    "My settings for message composition."
#                    (visual-line-mode)
#                    (org-mu4e-compose-org-mode)
#                    (use-hard-newlines -1)
#                    (flyspell-mode)))
#        (setq mu4e-contexts
#          (list
#           (make-mu4e-context
#            :name "personal"
#            :enter-func (lambda() (mu4e-message "Entering context personal"))
#            :leave-func (lambda() (mu4e-message "Leaving context personal"))
#            :match-func (lambda(msg)
#                          (when msg
#                            (mu4e-message-contact-field-matches
#                             msg '(:from :to :cc :bcc) "ilay.raz@gmail.com")))
#            :vars '((user-mail-address . "ilay.raz@gmail.com")
#                    (user-full-name . "Ilay Raz")
#                    (mu4e-sent-folder . "/personal/[personal].Sent Mail")
#                    (mu4e-drafts-folder . "/personal/[personal].drafts")
#                    (mu4e-trash-folder . "/personal/[personal].Trash")
#                    (mu4e-compose-format-flowed . t)
#                    (smtpmail-queue-dir . "~/Maildir/personal/queue/cur")
#                    (message-send-mail-function . smtpmail-send-it)
#                    (smtpmail-smtp-user . "ilay.raz")
#                    (smtpmail-default-smtp-server . "smtp.gmail.com")
#                    (smtpmail-smtp-server . "smtp.gmail.com")
#                    (smtpmail-smtp-service . 587)
#                    (smtpmail-debug-info . t)
#                    (smtpmail-debug-verbose . t)
#                    (mu4e-maildir-shortcuts . ( ("/personal/INBOX"                 . ?i)
#                                                 ("/personal/[personal].Sent Mail" . ?s)
#                                                 ("/personal/[personal].Trash"     . ?t)
#                                                 ("/personal/[personal].All Mail"  . ?a)
#                                                 ("/personal/[personal].Starred"   . ?r)
#                                                 ("/personal/[personal].drafts"    . ?d)))))

#           (make-mu4e-context
#            :name "ucsc"
#            :enter-func (lambda() (mu4e-message "Entering context ucsc"))
#            :leave-func (lambda() (mu4e-message "Leaving context ucsc"))
#            :match-func (lambda(msg)
#                          (when msg
#                            (mu4e-message-contact-field-matches
#                             msg '(:from :to :cc :bcc) "ilraz@ucsc.edu")))
#            :vars '((user-mail-address . "ilraz@ucsc.edu")
#                    (user-full-name . "Ilay Raz")
#                    (mu4e-sent-folder . "/ucsc/[ucsc].Sent Mail")
#                    (mu4e-drafts-folder . "/ucsc/[ucsc].drafts")
#                    (mu4e-trash-folder . "/ucsc/[ucsc].Trash")
#                    (mu4e-compose-format-flowed . t)
#                    (smtpmail-queue-dir . "~/Maildir/ucsc/queue/cur")
#                    (message-send-mail-function . smtpmail-send-it)
#                    (smtpmail-smtp-user . "ilraz")
#                    (smtpmail-default-smtp-server . "smtp.gmail.com")
#                    (smtpmail-smtp-server . "smtp.gmail.com")
#                    (smtpmail-smtp-service . 587)
#                    (smtpmail-debug-info . t)
#                    (smtpmail-debug-verbose . t)
#                    (mu4e-maildir-shortcuts . ( ("/ucsc/INBOX"             . ?i)
#                                                 ("/ucsc/[ucsc].Sent Mail" . ?s)
#                                                 ("/ucsc/[ucsc].Trash"     . ?t)
#                                                 ("/ucsc/[ucsc].All Mail"  . ?a)
#                                                 ("/ucsc/[ucsc].Starred"   . ?r)
#                                                 ("/ucsc/[ucsc].drafts"    . ?d)))))))
#        :custom
#        (mu4e-maildir (expand-file-name "~/Maildir"))

#        ;; get mail
#        (mu4e-get-mail-command "mbsync -c ~/.config/mbsync/.mbsync -a")
#        (mu4e-view-prefer-html t)
#        (mu4e-update-interval 180)
#        (mu4e-headers-auto-update t)
#        (mu4e-compose-signature-auto-include nil)
#        (mu4e-compose-format-flowed t)

#        (mu4e-view-show-images t)
#        (mu4e-sent-messages-behavior 'delete) ;; let IMAP take care of this

#        ;; needed for mbsync
#        (mu4e-change-filenames-when-moving t)

#        (mu4e-attachment-dir "~/Downloads")
#        (message-kill-buffer-on-exit t)
#        (mu4e-compose-dont-reply-to-self)
#        (mu4e-view-show-addresses 't)
#        (mu4e-confirm-quit nil)

#        ;; mu4e-context
#        (mu4e-context-policy 'pick-first)
#        (mu4e-compose-context-policy 'always-ask))
#    #+END_SRC
