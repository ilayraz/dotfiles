#+TITLE: Emacs configuration

* Set personal information

  #+BEGIN_SRC emacs-lisp
  (setq user-full-name "Ilay Raz"
        user-mail-address "ilay.raz@gmail.com")
  #+END_SRC

* Package managment

** Initial package setup
   #+BEGIN_SRC emacs-lisp
  (require 'package)
  (setq package-archives '(("gnu" . "https://elpa.gnu.org/packages/")
			   ("marmalade" . "https://marmalade-repo.org/packages/")
			   ("melpa" . "https://melpa.org/packages/")
			   ("org" . "http://orgmode.org/elpa/")))
  (package-initialize)
   #+END_SRC
** Always require all packages
   #+BEGIN_SRC emacs-lisp
  (setq use-package-always-ensure t)
   #+END_SRC

** Add manual packages

*** =use-package=
    Add =use-package= manually so that it can download everything else automatically
    #+BEGIN_SRC emacs-lisp
      (add-to-list 'load-path "~/.emacs.d/use-package")
      (require 'use-package)
    #+END_SRC

    #+RESULTS:

* Utility functions
  #+BEGIN_SRC emacs-lisp
    (defun insert-newline ()
      "Drop pointed line to a new line then move and tab the line above it"
      (interactive)
      (move-beginning-of-line nil)
      (newline-and-indent)
      (previous-line)
      (indent-for-tab-command))

    (defun create-newline ()
      "Create and move to new line below current line"
      (interactive)
      (move-end-of-line nil)
      (newline-and-indent))

    (defun comment-or-uncomment-region-or-line ()
      "Comments or uncomments the region or the current line if there's no active region."
      (interactive)
      (let (beg end)
        (if (region-active-p)
            (setq beg (region-beginning) end (region-end))
          (setq beg (line-beginning-position) end (line-end-position)))
        (comment-or-uncomment-region beg end)))

    (defun ask-before-closing ()
      "Ask before killing terminal"
      (interactive)
      (if (y-or-n-p (format "Are you sure you want to close this frame?"))
          (save-buffers-kill-terminal)
        (message "Canceled frame close")))
  #+END_SRC

* UI preferences

** Disable window elements

   Disable useless scrollbar

   #+BEGIN_SRC emacs-lisp
  (scroll-bar-mode nil)
  (tool-bar-mode t)
   #+END_SRC

** Disable visual bell
   #+BEGIN_SRC emacs-lisp
  (setq ring-bell-function 'ignore)
   #+END_SRC

** Display line numbers
   Enable =linum-mode=
   #+BEGIN_SRC emacs-lisp
  (global-linum-mode t)
   #+END_SRC

** Highlight the current line
   Softly highlight background color of current line
   #+BEGIN_SRC emacs-lisp
  (when window-system
    (global-hl-line-mode))
   #+END_SRC

** Highlight uncommited changes
   Use =diff-hl= package to highlight changed-and-commited lines when programming
   #+BEGIN_SRC emacs-lisp
  (use-package diff-hl
    :config
    (add-hook 'prog-mode-hook 'turn-on-diff-hl-mode))
   #+END_SRC

** Improve mode line
   Use =powerline= to improve the =mode line=
   #+BEGIN_SRC emacs-lisp
  (use-package powerline
    :config
    (powerline-default-theme))
   #+END_SRC

** Set theme
   Use =moe-dark= theme
   #+BEGIN_SRC emacs-lisp
  (use-package moe-theme
    :config
    (powerline-moe-theme)
    (moe-dark))
   #+END_SRC

** Ido
   Enable =ido-mode=
   #+BEGIN_SRC emacs-lisp
   (ido-mode t)
   (setq ido-enable-flex-matching t)
   #+END_SRC

** Set defualt font
   Increase =font-height= to 16
   #+BEGIN_SRC emacs-lisp
  (set-face-attribute 'default nil :height 160 :family "Iosevka Type")
   #+END_SRC

** Defualt max line length
   #+BEGIN_SRC emacs-lisp
  (setq-default fill-column 80)
   #+END_SRC

** Activate font-lock
   Use =font-lock-mode= to fontify different kinds of text
   #+BEGIN_SRC emacs-lisp
  (global-font-lock-mode t)
   #+END_SRC

** Show matching parenthesese
   and don't wait before showing them
   #+BEGIN_SRC emacs-lisp
  (show-paren-mode 1)
  (setq show-paren-delay 0.0)
   #+END_SRC

** Pretty symbols
   Use =prettify-symbols-mode= for pretty symbols
   #+BEGIN_SRC emacs-lisp
  (global-prettify-symbols-mode t)
   #+END_SRC

** Don't open new file in new frame
   #+BEGIN_SRC emacs-lisp
     (setq ns-pop-up-frame nil)
   #+END_SRC
* Programming customization
** Set indent
   Use a 4 space indent
   #+BEGIN_SRC emacs-lisp
  (setq-default tab-width 4)
   #+END_SRC

** Magit
   Use =C-x g= to bring up the status menu
   #+BEGIN_SRC emacs-lisp
     (use-package magit
       :config
       (global-magit-file-mode)
       :bind ("C-x g" . magit-status))
   #+END_SRC

** Autocomplete
   #+BEGIN_SRC emacs-lisp
     (use-package auto-complete
       :config
       (ac-config-default))
   #+END_SRC

** Elpy
   #+BEGIN_SRC emacs-lisp
  (setq elpy-rpc-python-command "python3.6")
  (use-package elpy
    :config
    (elpy-enable))
   #+END_SRC

** Direx
   Bind =C-x C-j= to open direx directory in other window
   #+BEGIN_SRC emacs-lisp
     (use-package direx
       :bind ("C-x C-j" . direx:jump-to-directory-other-window))
   #+END_SRC

** C
*** Set the C indents
    #+BEGIN_SRC emacs-lisp
     (setq c-basic-offset 4)
     (setq c-label-minimum-indentation 4)
    #+END_SRC
*** Insert printf function
    #+BEGIN_SRC emacs-lisp
      (defun insert-printf ()
        "Inserts statment \"printf(\"\n\")\" with the pointer pointing to after the opening quote"
        (interactive)
        (insert "printf(\"\\n\", );")
        (backward-char 7))
    #+END_SRC
*** Insert -> function
    #+BEGIN_SRC emacs-lisp
      (defun insert-arrow ()
        "Inserts an arrow (\"->\")"
        (interactive)
        (insert "->"))
    #+END_SRC
*** Set cc-mode keybinds
    #+BEGIN_SRC emacs-lisp
  (add-hook 'c-initialization-hook
            (lambda () (define-key c-mode-base-map "\C-cp" 'insert-printf)))
  (add-hook 'c-initialization-hook
            (lambda () (define-key c-mode-base-map (kbd "C-.") 'insert-arrow)))
    #+END_SRC
** Treat CamelCaseSubWords as seperate words
   #+BEGIN_SRC emacs-lisp
  (add-hook 'prog-mode-hook 'subword-mode)
   #+END_SRC
* Editing

** Always require a final newline
   #+BEGIN_SRC emacs-lisp
  (setq require-final-newline t)
   #+END_SRC

** Don't assume double space after period
   #+BEGIN_SRC emacs-lisp
  (setq sentence-end-double-space nil)
   #+END_SRC

** Disable tab-indent
   #+BEGIN_SRC emacs-lisp
  (setq-default indent-tabs-mode nil)
   #+END_SRC

** Delete trailing whitespace on save
   #+BEGIN_SRC emacs-lisp
  (add-hook 'before-save-hook 'delete-trailing-whitespace)
   #+END_SRC

** Overwrite selection
   Overwrite selection when writing over selected text
   #+BEGIN_SRC emacs-lisp
  (delete-selection-mode)
   #+END_SRC
** Automatically update buffer when it changes on disk
   Use =auto-revert-mode= to immidiatly update buffer when file changes on disk
   #+BEGIN_SRC emacs-lisp
  (global-auto-revert-mode t)
   #+END_SRC
* File finding
** Set defualt directory to home
   #+BEGIN_SRC emacs-lisp

  (setq default-directory "~/")
   #+END_SRC
** Follow symlinks
   #+BEGIN_SRC emacs-lispq
  (setq vc-follow-symlinks t)
   #+END_SRC
** Add human readable size units to dired
   #+BEGIN_SRC emacs-lisp
  (setq-default dired-listing-switches "alh")
   #+END_SRC
* General
** ask for y-or-n instead of yes-or-no
   #+BEGIN_SRC emacs-lisp
     (fset 'yes-or-no-p 'y-or-n-p)
   #+END_SRC
** Ask for confirmation before killing emacs
   #+BEGIN_SRC emacs-lisp
  (setq confirm-kill-emacs 'y-or-n-p)
   #+END_SRC
** Wait for 20MB before trash collecting
   #+BEGIN_SRC emacs-lisp
     (setq gc-cons-threshold 20000000)
   #+END_SRC
** No startup message
   and start with an empty strach
   #+BEGIN_SRC emacs-lisp
     (setq inhibit-startup-message t)
     (setq initial-scratch-message nil)
   #+END_SRC
* Keybinds
  #+BEGIN_SRC emacs-lisp
    (global-set-key (kbd "M-o") 'other-window)
    (global-set-key (kbd "C-x C-b") 'ibuffer)

    (global-set-key (kbd "C-s") 'isearch-forward-regexp)
    (global-set-key (kbd "C-r") 'isearch-backward-regexp)

    (global-set-key (kbd "C-o") 'insert-newline)
    (global-set-key (kbd "C-M-o") 'create-newline)
    (global-set-key (kbd "M-;") 'comment-or-uncomment-region-or-line)

    ;; Set keybind only when Emacs is running as a daemon
    (when (daemonp)
      (global-set-key (kbd "C-x C-c") 'ask-before-closing))
  #+END_SRC
* Org-mode
** Display preferences
*** Use pretty bullets instead of asterisks
    #+BEGIN_SRC emacs-lisp
     (use-package org-bullets
       :config
       (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
    #+END_SRC

*** Use little downward-pointing arrow instead of ellipsis
    #+BEGIN_SRC emacs-lisp
     (setq org-ellipsis "â¤µ")
    #+END_SRC

*** Use syntax highlighting in source block while editing
    #+BEGIN_SRC emacs-lisp
     (setq org-src-fontify-natively t)
    #+END_SRC

*** Make TAB act as if it were issued in a buffer of the language's major mode
    #+BEGIN_SRC emacs-lisp
     (setq org-src-tab-acts-natively t)
    #+END_SRC

*** When editing a code snippet, use current window instead of opening a new one
    #+BEGIN_SRC emacs-lisp
     (setq org-src-window-setup 'current-window)
    #+END_SRC
** Exporting
*** Babel code evaluation
    #+BEGIN_SRC emacs-lisp
      (org-babel-do-load-languages
       'org-babel-load-languages
       '((emacs-lisp . t)
         (python . t)))
    #+END_SRC
*** Export with smart quotes
    #+BEGIN_SRC emacs-lisp
      (setq org-export-with-smart-quotes t)
    #+END_SRC
*** HTML
**** Don't include footer
     #+BEGIN_SRC emacs-lisp
      (setq org-html-postamble nil)
    #+END_SRC
**** Use htmlize
     #+BEGIN_SRC emacs-lisp
       (use-package htmlize)
     #+END_SRC
