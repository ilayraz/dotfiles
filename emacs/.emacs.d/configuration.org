#+TITLE: Emacs configuration

* Set personal information

  #+BEGIN_SRC emacs-lisp
  (setq user-full-name "Ilay Raz"
        user-mail-address "ilay.raz@gmail.com")
  #+END_SRC

* Package managment

** Initial package setup
   #+BEGIN_SRC emacs-lisp
  (require 'package)
  (setq package-archives '(("gnu" . "https://elpa.gnu.org/packages/")
			   ("marmalade" . "https://marmalade-repo.org/packages/")
			   ("melpa" . "https://melpa.org/packages/")
			   ("org" . "http://orgmode.org/elpa/")))
  (package-initialize)
   #+END_SRC

** Ensure [[https://github.com/jwiegley/use-package][use-package]] is avaliable, if not install it
   #+BEGIN_SRC emacs-lisp
     (unless (package-installed-p 'use-package)
       (package-refresh-contents)
       (package-install 'use-package))
   #+END_SRC
** Always require all packages
   #+BEGIN_SRC emacs-lisp
     (setq use-package-always-ensure t)
   #+END_SRC
* General
** Keep changes from customize in a seperate file
   #+BEGIN_SRC emacs-lisp
     (setq custom-file "~/.emacs.d/emacs-customize.el")
     (load custom-file)
   #+END_SRC
** ask for y-or-n instead of yes-or-no
   #+BEGIN_SRC emacs-lisp
     (fset 'yes-or-no-p 'y-or-n-p)
   #+END_SRC
** Ask for confirmation before killing emacs
   #+BEGIN_SRC emacs-lisp
  (setq confirm-kill-emacs 'y-or-n-p)
   #+END_SRC
** Wait for 20MB before trash collecting
   #+BEGIN_SRC emacs-lisp
     (setq gc-cons-threshold 20000000)
   #+END_SRC
** No startup message

   and start with an empty scratch
   #+BEGIN_SRC emacs-lisp
     (setq inhibit-startup-message t
           initial-scratch-message nil)
   #+END_SRC
** Start with configuration.org file open
   #+BEGIN_SRC emacs-lisp
     (setq initial-buffer-choice "~/.emacs.d/configuration.org")
   #+END_SRC
** Save all backups in one place
   #+BEGIN_SRC emacs-lisp
     (setq backup-directory-alist
     `(("." . ,(concat user-emacs-directory "backups"))))
   #+END_SRC
** Automatically update buffer when it changes on disk
   Use =auto-revert-mode= to immidiatly update buffer when file changes on disk
   #+BEGIN_SRC emacs-lisp
  (global-auto-revert-mode t)
   #+END_SRC
** Message startup time
   #+BEGIN_SRC emacs-lisp
     (add-hook 'emacs-startup-hook #'(lambda ()
                                       (message "Emacs ready in %s with %d garbage collections."
                                                (format "%.2f seconds"
                                                        (float-time
                                                         (time-subtract after-init-time before-init-time)))
                                                gcs-done)))
   #+END_SRC
* Editor
** Always require a final newline
   #+BEGIN_SRC emacs-lisp
  (setq require-final-newline t)
   #+END_SRC

** Don't assume double space after period
   #+BEGIN_SRC emacs-lisp
  (setq sentence-end-double-space nil)
   #+END_SRC

** Disable tab-indent
   #+BEGIN_SRC emacs-lisp
  (setq-default indent-tabs-mode nil)
   #+END_SRC

** Delete trailing whitespace on save
   #+BEGIN_SRC emacs-lisp
  (add-hook 'before-save-hook 'delete-trailing-whitespace)
   #+END_SRC

** Overwrite selection
   Overwrite selection when writing over selected text
   #+BEGIN_SRC emacs-lisp
  (delete-selection-mode)
   #+END_SRC
** Enable hs-minor-mode
   Use C-c @ C-c to toggle code-fold
   #+BEGIN_SRC emacs-lisp
     (add-hook 'prog-mode-hook (lambda () (interactive)(hs-minor-mode 1)))
   #+END_SRC
** Encoding preferences
   #+BEGIN_SRC emacs-lisp
     (prefer-coding-system 'utf-8)
     (set-default-coding-systems 'utf-8)
     (set-terminal-coding-system 'utf-8)
     (set-keyboard-coding-system 'utf-8)
     (setq-default buffer-file-coding-system 'utf-8-unix)
   #+END_SRC
** Save file on exit or file change
   #+BEGIN_SRC emacs-lisp
     (add-hook 'focus-out-hook (lambda () (interactive)(save-some-buffers t)))
     (add-hook 'delete-frame-functions (lambda () (interactive)(save-some-buffers t)))
   #+END_SRC
** Treat CamelCaseSubWords as seperate words
   #+BEGIN_SRC emacs-lisp
  (add-hook 'prog-mode-hook 'subword-mode)
   #+END_SRC
* Utility functions
  #+BEGIN_SRC emacs-lisp
    (defun insert-newline ()
      "Drop pointed line to a new line then move and tab the line above it"
      (interactive)
      (move-beginning-of-line nil)
      (newline-and-indent)
      (previous-line)
      (indent-for-tab-command))

    (defun create-newline ()
      "Create and move to new line below current line"
      (interactive)
      (move-end-of-line nil)
      (newline-and-indent))

    (defun comment-or-uncomment-region-or-line ()
      "Comments or uncomments the region or the current line if there's no active region."
      (interactive)
      (let (beg end)
        (if (region-active-p)
            (setq beg (region-beginning) end (region-end))
          (setq beg (line-beginning-position) end (line-end-position)))
        (comment-or-uncomment-region beg end)))

    (defun ask-before-closing ()
      "Ask before killing terminal"
      (interactive)
      (if (y-or-n-p (format "Are you sure you want to close this frame?"))
          (save-buffers-kill-terminal)
        (message "Canceled frame close")))
  #+END_SRC

* UI preferences
** Disable window elements
   Disable useless scrollbar
   #+BEGIN_SRC emacs-lisp
  (scroll-bar-mode nil)
  (tool-bar-mode t)
   #+END_SRC

** Disable visual bell
   #+BEGIN_SRC emacs-lisp
  (setq ring-bell-function 'ignore)
   #+END_SRC

** Highlight the current line
   Softly highlight background color of current line
   #+BEGIN_SRC emacs-lisp
  (when window-system
    (global-hl-line-mode))
   #+END_SRC

** Improve mode line
   Use =powerline= to improve the =mode line=
   #+BEGIN_SRC emacs-lisp
     (use-package powerline)
   #+END_SRC

** Set theme
   Use =moe-dark= theme
   #+BEGIN_SRC emacs-lisp
     (use-package moe-theme
       :after (powerline)
       :config
       (powerline-moe-theme)
       (moe-dark))
   #+END_SRC

** Set defualt font
   Increase =font-height= to 16
   #+BEGIN_SRC emacs-lisp
  (set-face-attribute 'default nil :height 160 :family "Iosevka Type")
   #+END_SRC

** Defualt max line length
   #+BEGIN_SRC emacs-lisp
  (setq-default fill-column 80)
   #+END_SRC

** Activate font-lock
   Use =font-lock-mode= to fontify different kinds of text
   #+BEGIN_SRC emacs-lisp
  (global-font-lock-mode t)
   #+END_SRC

** Show matching parenthesese
   and don't wait before showing them
   #+BEGIN_SRC emacs-lisp
  (show-paren-mode 1)
  (setq show-paren-delay 0.0)
   #+END_SRC

** Pretty symbols
   Use =prettify-symbols-mode= for pretty symbols
   #+BEGIN_SRC emacs-lisp
  (global-prettify-symbols-mode t)
   #+END_SRC

** Don't open new file in new frame
   #+BEGIN_SRC emacs-lisp
     (setq ns-pop-up-frame nil)
   #+END_SRC
** Hide menu
   #+BEGIN_SRC emacs-lisp
     (menu-bar-mode 0)
     (tool-bar-mode 0)
   #+END_SRC
* Programming customization
** Set indent
   Use a 4 space indent
   #+BEGIN_SRC emacs-lisp
  (setq-default tab-width 4)
   #+END_SRC

** Multi-language
*** Insert -> function
    #+BEGIN_SRC emacs-lisp
      (defun insert-dash-arrow ()
        "Inserts an arrow (\"->\")"
        (interactive)
        (insert "->"))
    #+END_SRC
** C
*** Set the C indents
    #+BEGIN_SRC emacs-lisp
      (setq c-basic-offset 4
       c-label-minimum-indentation 4)
    #+END_SRC
*** Insert printf function
    #+BEGIN_SRC emacs-lisp
      (defun insert-printf ()
        "Inserts statment \"printf(\"\n\")\" with the pointer pointing to after the opening quote"
        (interactive)
        (insert "printf(\"\\n\", );")
        (backward-char 7))
    #+END_SRC
*** Set cc-mode keybinds
    #+BEGIN_SRC emacs-lisp
  (add-hook 'c-initialization-hook
            (lambda () (define-key c-mode-base-map "\C-cp" 'insert-printf)))
  (add-hook 'c-initialization-hook
            (lambda () (define-key c-mode-base-map (kbd "C-.") 'insert-dash-arrow)))
    #+END_SRC
*** gdb mode
   #+BEGIN_SRC emacs-lisp
     (setq gdb-many-windows t
           gdb-show-main t)
   #+END_SRC
** C++
*** Irony
    #+BEGIN_SRC emacs-lisp
      (use-package irony
        :hook (((c++-mode c-mode objc-mode) . irony-mode)
               (irony-mode . irony-cdb-autosetup-compile-options)))
    #+END_SRC
** Java
*** Getters/setters
    #+BEGIN_SRC emacs-lisp
      (use-package java-snippets
        :config
        (setq yas-snippet-dirs
              '("~/.emacs.d/snippets"))
        (yas-load-directory "~/.emacs.d/snippets"))
    #+END_SRC
** Haskell
*** Haskell mode
    #+BEGIN_SRC emacs-lisp
      (use-package haskell-mode
        :mode "\\.hs\\'"
        :interpreter "haskell"
        :bind (:map haskell-mode-map
                    ("C-\." . insert-dash-arrow)
                    ("C-M-\." . insert-equal-arrow)))
    #+END_SRC
*** Insert => function
    #+BEGIN_SRC emacs-lisp
      (defun insert-equal-arrow ()
        "Inserts an arrow (\"=>\")"
        (interactive)
        (insert "=>"))
    #+END_SRC
** Python
*** Elpy
    #+BEGIN_SRC emacs-lisp
   (setq elpy-rpc-python-command "python3.6")
   (use-package elpy
     :config
     (elpy-enable))
    #+END_SRC
** Javascript
   #+BEGIN_SRC emacs-lisp
     (use-package rjsx-mode
       :mode ("\\.js\\'" "\\.jsx'")
       :interpreter "javascript"
       :config
       (js2-mode-hide-warnings-and-errors)
       :init
       (add-hook 'rjsx-mode-hook #'(lambda ()
                                     (setq-local indent-line-function 'my/rjsx-indent-line)))
       (add-hook 'rjsx-mode-hook #'(lambda ()
                                    (use-eslint-from-node-modules)
                                    (my/rjsx-use-eslint-indent))))



     (use-package tide
       :after (rjsx-mode company flycheck)
       :hook n((rjsx-mode . tide-setup)
              (rjsx-mode . tide-hl-identifier-mode)
              (before-save . tinde-format-before-save)))


     (defun use-eslint-from-node-modules ()
       "Use local eslint config for flycheck."
       (let* ((root (locate-dominating-file
                     (or (buffer-file-name) default-directory)
                     "node_modules"))
              (eslint (and root
                           (expand-file-name "node_modules/eslint/bin/eslint.js"
                                             root))))
         (when (and eslint (file-executable-p eslint))
           (setq-local flycheck-javascript-eslint-executable eslint))))
     (add-hook 'flycheck-mode-hook #'use-eslint-from-node-modules)

     (defun my/rjsx-use-eslint-indent ()
       "Check eslint file if exists and set `indent-tabs-mode` and `js-indent-level` accordingly."
       (when (boundp 'flycheck-javascript-eslint-executable)
         (let* ((json-object-type 'hash-table)
                (json-config (shell-command-to-string (format (concat flycheck-javascript-eslint-executable " --print-config %s")
                                                              (shell-quote-argument (buffer-file-name)))))
                (indent-value (elt (gethash "indent" (gethash "rules" (json-read-from-string json-config))) 1)))
           (ignore-errors
             (if (equal indent-value "tab")
                 (setq indent-tabs-mode t
                       js-indent-level 4)
               (setq indent-tabs-mode nil
                     js-indent-level indent-value))))))

     (defun my/rjsx-indent-line ()
     "Overwrite default rjsx indent function to not overwrite the `indent-tabs-mode` variable."
       (unless rjsx--indent-region-p
         (js2-reparse))

       (let* (;;(indent-tabs-mode nil)
              (cur-pos (save-excursion (back-to-indentation) (point)))
              (cur-char (char-after cur-pos))
              (node (js2-node-at-point (- cur-pos rjsx--indent-running-offset)))
              (parent (js2-node-parent node)))
         (cond
          ((rjsx-node-p node)
           (cond
            ((eq cur-char ?<)
             (if (rjsx-node-p parent)
                 (rjsx--indent-line-to-offset parent sgml-basic-offset)
               ;; Top-level node, indent as JS
               (js-indent-line))
             (when rjsx--node-abs-pos-cache
               (setf (gethash node rjsx--node-abs-pos-cache)
                     (save-excursion (back-to-indentation) (point)))))
            ((memq cur-char '(?/ ?>))
             (rjsx--indent-line-to-offset node 0))
            ((eq cur-char ?\n)
             (rjsx--indent-line-to-offset node sgml-basic-offset))
            (t (error "Don't know how to indent %s for JSX node" (make-string 1 cur-char)))))
          ((and (rjsx-identifier-p parent)
                (rjsx-member-p (js2-node-parent parent))
                (rjsx-node-p (js2-node-parent (js2-node-parent parent))))
           (rjsx--indent-line-to-offset (js2-node-parent (js2-node-parent parent)) 0))

          ;; JSX children
          ((rjsx-closing-tag-p node)
           (rjsx--indent-line-to-offset parent 0))
          ((rjsx-text-p node)
           (rjsx--indent-line-to-offset parent sgml-basic-offset))
          ((rjsx-wrapped-expr-p node)
           (if (eq cur-char ?})
               (js-indent-line)
             (rjsx--indent-line-to-offset parent sgml-basic-offset)))

          ;; Attribute-like (spreads, attributes, etc.)
          ;; if first attr is on same line as tag, then align
          ;; otherwise indent to parent level + sgml-basic-offset
          ((or (rjsx-identifier-p node)
               (and (rjsx-identifier-p parent)
                    (rjsx-attr-p (js2-node-parent parent)))
               (rjsx-spread-p node))
           (let* ((tag (or (rjsx-ancestor node #'rjsx-node-p)
                           (error "Did not find containing JSX tag for attributes")))
                  (name (rjsx-node-name tag))
                  column)
             (save-excursion
               (goto-char (rjsx--node-abs-pos tag))
               (setq column (current-column))
               (when name (forward-char (js2-node-end name)) (skip-chars-forward " \t"))
               (if (eolp)
                   (setq column (+ column sgml-basic-offset sgml-attribute-offset))
                 (setq column (current-column))))
             (indent-line-to column)))

          ;; Everything else indent as javascript
          (t (js-indent-line)))

         (when rjsx--indent-region-p
           (cl-incf rjsx--indent-running-offset
                    (- (save-excursion (back-to-indentation) (point))
                       cur-pos)))))
   #+END_SRC
* File finding
** Set defualt directory to home
   #+BEGIN_SRC emacs-lisp

  (setq default-directory "~/")
   #+END_SRC
** Follow symlinks
   #+BEGIN_SRC emacs-lispq
  (setq vc-follow-symlinks t)
   #+END_SRC
** Add human readable size units to dired
   #+BEGIN_SRC emacs-lisp
     (setq-default dired-listing-switches "-alh")
   #+END_SRC
** Ido
   Enable =ido-mode=
   #+BEGIN_SRC emacs-lisp
   (ido-mode t)
   (setq ido-enable-flex-matching t)
   #+END_SRC

* Keybinds
  #+BEGIN_SRC emacs-lisp
    (global-set-key (kbd "M-o") 'other-window)
    (global-set-key (kbd "C-x C-b") 'ibuffer)

    (global-set-key (kbd "C-s") 'isearch-forward-regexp)
    (global-set-key (kbd "C-r") 'isearch-backward-regexp)

    (global-set-key (kbd "C-o") 'insert-newline)
    (global-set-key (kbd "C-M-o") 'create-newline)
    (global-set-key (kbd "M-;") 'comment-or-uncomment-region-or-line)

    (global-set-key [remap dabbrev-expand] 'hippie-expand)

    ;; Toggle menu
    (global-set-key (kbd "<mouse-3>") 'mouse-major-mode-menu)
    (global-set-key (kbd "<M-mouse-3>") 'mouse-popup-menubar)

    ;; Set keybind only when Emacs is running as a daemon
    (when (daemonp)
      (global-set-key (kbd "C-x C-c") 'ask-before-closing))
  #+END_SRC
* Org-mode
** Display preferences
*** Use pretty bullets instead of asterisks
    #+BEGIN_SRC emacs-lisp
     (use-package org-bullets
       :config
       (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
    #+END_SRC

*** Use syntax highlighting in source block while editing
    #+BEGIN_SRC emacs-lisp
     (setq org-src-fontify-natively t)
    #+END_SRC

*** Make TAB act as if it were issued in a buffer of the language's major mode
    #+BEGIN_SRC emacs-lisp
     (setq org-src-tab-acts-natively t)
    #+END_SRC

*** When editing a code snippet, use current window instead of opening a new one
    #+BEGIN_SRC emacs-lisp
     (setq org-src-window-setup 'current-window)
    #+END_SRC
** Exporting
*** Babel code evaluation
    #+BEGIN_SRC emacs-lisp
      (org-babel-do-load-languages
       'org-babel-load-languages
       '((emacs-lisp . t)
         (python . t)))
    #+END_SRC
*** Export with smart quotes
    #+BEGIN_SRC emacs-lisp
      (setq org-export-with-smart-quotes t)
    #+END_SRC
*** HTML
**** Don't include footer
     #+BEGIN_SRC emacs-lisp
      (setq org-html-postamble nil)
    #+END_SRC
**** Use htmlize
     #+BEGIN_SRC emacs-lisp
       (use-package htmlize)
     #+END_SRC
*** LaTeX
    #+BEGIN_SRC emacs-lisp
      (add-to-list 'org-latex-packages-alist '("" "mypackage"))
      (add-to-list 'org-latex-packages-alist '("" "amsthm"))
      (setq org-list-allow-alphabetical t)
    #+END_SRC
* Packages
** General
*** Diminish
    #+BEGIN_SRC emacs-lisp
      (use-package diminish)
    #+END_SRC
*** dired-subtree
    #+BEGIN_SRC emacs-lisp
      (use-package dired-subtree
        :demand
        :bind (:map dired-mode-map
                    ("i" . dired-subtree-insert)
                    (";" . dired-subtree-remove)))
    #+END_SRC
*** smex
    #+BEGIN_SRC emacs-lisp
      (use-package smex
        :bind ([remap execute-extended-command] . smex))
    #+END_SRC
*** Flycheck
    #+BEGIN_SRC emacs-lisp
      (use-package flycheck
        :init
        (global-flycheck-mode))
    #+END_SRC
** Git
*** Magit
    Use =C-x g= to bring up the status menu
    #+BEGIN_SRC emacs-lisp
      (use-package magit
        :config
        (global-magit-file-mode)
        :bind ("C-x g" . magit-status))
    #+END_SRC
*** Highlight uncommited changes
    Use =diff-hl= package to highlight changed-and-commited lines when programming
    #+BEGIN_SRC emacs-lisp
      (use-package diff-hl
        :config
        (global-diff-hl-mode))
    #+END_SRC
** Company
   #+BEGIN_SRC emacs-lisp
     (use-package company
       :bind ("C-c f" . company-complete)
       :init
       (add-hook 'after-init-hook 'global-company-mode))
   #+END_SRC
*** Math
    #+BEGIN_SRC emacs-lisp
      (use-package company-math
        :after (company)
        :init
        (add-to-list 'company-backends 'company-math-symbols-unicode))
    #+END_SRC
*** Fuzzy matching
    #+BEGIN_SRC emacs-lisp
      (use-package company-flx
        :after company
        :config
        (company-flx-mode +1))
    #+END_SRC
*** c++
    #+BEGIN_SRC emacs-lisp
      (use-package company-irony
        :after (company)
        :init
        (add-to-list 'company-backends 'company-irony))
    #+END_SRC
** which-key
   #+BEGIN_SRC emacs-lisp
     (use-package which-key
       :defer 0.2
       :diminish
       :config
       (which-key-mode))
   #+END_SRC
